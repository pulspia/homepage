# 홈페이지 배포 가이드

## 1. 빌드 전 준비사항

### 환경 변수 설정
배포 전에 `.env` 파일의 API 키들이 올바르게 설정되어 있는지 확인하세요:

```
GEMINI_API_KEY=AIzaSyD3cE9I_PCdUV0f-0LTi62Q9jHUHuihgLU
REACT_APP_EMAILJS_SERVICE_ID=service_lz6ciiq
REACT_APP_EMAILJS_TEMPLATE_ID=template_gl8ndns
REACT_APP_EMAILJS_PUBLIC_KEY=GS3Jau05r6XdU9n5a
```

⚠️ **중요**: `.env` 파일 자체는 배포하지 않습니다!
- .env 파일은 gitignore에 포함되어 GitHub에 업로드되지 않습니다
- 환경 변수는 배포 플랫폼의 설정에서 따로 입력해야 합니다


## 2. 프로덕션 빌드 생성

```bash
npm run build
```

이 명령어는 `build` 폴더에 최적화된 프로덕션 파일을 생성합니다.

생성되는 파일들:
- build/
  ├── index.html
  ├── static/
  │   ├── css/
  │   ├── js/
  │   └── media/
  └── manifest.json


## 3. 배포 방법

### 방법 1: Vercel 배포 (추천)

1. Vercel 계정 생성: https://vercel.com
2. GitHub 저장소 연결
3. 프로젝트 import
4. 환경 변수 설정:
   - Settings → Environment Variables로 이동
   - 다음 변수들을 추가:
     * GEMINI_API_KEY
     * REACT_APP_EMAILJS_SERVICE_ID
     * REACT_APP_EMAILJS_TEMPLATE_ID
     * REACT_APP_EMAILJS_PUBLIC_KEY
5. Deploy 버튼 클릭

**장점**: 자동 배포, HTTPS, 무료, CDN 포함


### 방법 2: Netlify 배포

1. Netlify 계정 생성: https://netlify.com
2. "Add new site" → "Import an existing project"
3. GitHub 저장소 연결
4. Build settings:
   - Build command: `npm run build`
   - Publish directory: `build`
5. Environment variables 설정:
   - Site settings → Environment variables
   - 위의 4개 환경 변수 추가
6. Deploy site 클릭

**장점**: 자동 배포, HTTPS, 무료, 폼 처리 기능


### 방법 3: GitHub Pages 배포

⚠️ **주의**: GitHub Pages는 환경 변수를 지원하지 않습니다!
- EmailJS와 Gemini API 기능이 작동하지 않습니다
- 정적 UI만 배포하려는 경우에만 사용하세요

1. package.json에 homepage 추가:
   ```json
   "homepage": "https://[your-username].github.io/homepage"
   ```

2. gh-pages 설치:
   ```bash
   npm install --save-dev gh-pages
   ```

3. package.json에 스크립트 추가:
   ```json
   "scripts": {
     "predeploy": "npm run build",
     "deploy": "gh-pages -d build"
   }
   ```

4. 배포:
   ```bash
   npm run deploy
   ```


### 방법 4: 일반 웹 호스팅 (FTP)

1. 빌드 실행:
   ```bash
   npm run build
   ```

2. `build` 폴더의 모든 내용을 FTP로 업로드

3. **업로드할 파일들**:
   ```
   build/
   ├── index.html          ✅ 업로드
   ├── manifest.json       ✅ 업로드
   ├── robots.txt          ✅ 업로드
   ├── static/             ✅ 업로드 (전체 폴더)
   └── videos/             ✅ 업로드 (있는 경우)
   ```

4. **업로드하지 말아야 할 파일들**:
   ```
   .env                    ❌ 절대 업로드 금지!
   .git/                   ❌ 업로드 금지
   node_modules/           ❌ 업로드 금지
   src/                    ❌ 업로드 금지
   package.json            ❌ 업로드 금지
   ```

⚠️ **환경 변수 문제**:
- 일반 호스팅은 환경 변수를 직접 지원하지 않습니다
- API 키를 빌드에 포함시켜야 하므로 보안상 권장하지 않습니다


## 4. API 키 보안

### 현재 상태
- `.env` 파일에 API 키가 있지만 gitignore에 포함되어 있습니다
- GitHub에는 업로드되지 않습니다

### 배포 시 처리 방법

**Vercel/Netlify 사용 시 (추천)**:
✅ 환경 변수를 플랫폼 설정에서 안전하게 관리
✅ 코드에 직접 포함되지 않음
✅ 보안 유지

**일반 호스팅 사용 시**:
⚠️ 빌드 시 환경 변수가 JavaScript에 포함됨
⚠️ 브라우저에서 API 키를 볼 수 있음
⚠️ EmailJS Public Key는 공개되어도 괜찮지만, Gemini API 키는 주의 필요

### EmailJS Public Key 보안
- EmailJS Public Key는 이름 그대로 "공개" 키입니다
- 브라우저에서 실행되는 것이 정상입니다
- EmailJS 대시보드에서 도메인 제한 설정 가능

### Gemini API Key 보안
⚠️ 주의: 현재 구조에서는 API 키가 클라이언트에 노출됩니다
- 프로덕션 환경에서는 백엔드 서버를 통해 API를 호출하는 것이 안전합니다
- 또는 Gemini API에서 API 키 제한 설정 (도메인/IP 제한)


## 5. 배포 후 확인사항

✅ 다크/라이트 모드 전환 작동 확인
✅ 한국어/영어 언어 전환 작동 확인
✅ 문의 폼 작동 확인 (실제 이메일 전송 테스트)
✅ 모든 섹션 네비게이션 작동 확인
✅ 반응형 디자인 확인 (모바일, 태블릿, 데스크톱)
✅ 브라우저 콘솔에서 에러 확인


## 6. 추천 배포 방법 요약

**최고 추천**: Vercel 또는 Netlify
- ✅ 무료
- ✅ 자동 배포
- ✅ 환경 변수 안전 관리
- ✅ HTTPS 자동
- ✅ CDN 포함
- ✅ 빠른 속도

**비추천**: GitHub Pages 또는 일반 FTP 호스팅
- ❌ 환경 변수 미지원
- ❌ API 키 보안 문제
- ❌ 기능 제한


## 7. 문제 해결

### 빌드 에러 발생 시
```bash
# 캐시 삭제 후 재빌드
rm -rf node_modules
rm package-lock.json
npm install
npm run build
```

### 환경 변수가 작동하지 않을 때
- 환경 변수 이름이 `REACT_APP_`로 시작하는지 확인
- 배포 플랫폼에서 환경 변수를 올바르게 설정했는지 확인
- 빌드 후 배포해야 환경 변수가 적용됨

### 문의 폼이 작동하지 않을 때
- EmailJS 환경 변수가 올바른지 확인
- 브라우저 콘솔에서 에러 메시지 확인
- EmailJS 대시보드에서 월 전송 제한(200개) 확인
